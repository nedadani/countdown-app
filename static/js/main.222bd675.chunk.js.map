{"version":3,"sources":["background.jpg","Components/Countdown.tsx","Components/Sidebar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","container","fontSize","justifySelf","alignSelf","breakpoints","down","counter","textAlign","fontFamily","color","lineHeight","margin","daysUntil","event","width","Countdown","props","classes","React","useState","days","values","setValues","useEffect","daysLeft","moment","data","date","add","diff","calculateDifference","className","display","flexWrap","datePicker","textField","marginRight","spacing","marginLeft","button","input","Sidebar","format","targetDate","setTargetDate","targetEvent","setTargetEvent","utils","MomentUtils","DatePicker","value","onChange","minDate","TextField","target","id","label","inputProps","maxLength","Button","variant","onClick","closeDrawer","list","fullList","fab","background","backgroundImage","Background","backgroundSize","height","justifyContent","topContainer","position","left","arrow","top","transform","addNew","padding","Boolean","window","location","hostname","match","ReactDOM","render","state","setState","setData","checkLocalStorage","localStorage","setItem","JSON","stringify","eventName","hasOwnProperty","countdown","parse","getItem","toggleDrawer","side","open","src","alt","Fab","aria-label","Drawer","onClose","role","List","ListItem","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.222bd675.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.47fb27b4.jpg\";","import React from \"react\";\nimport moment from \"moment\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        container: {\n            fontSize: \"16px\",\n            justifySelf: \"center\",\n            alignSelf: \"center\",\n            [theme.breakpoints.down(\"xs\")]: {\n                fontSize: \"12px\"\n            }\n        },\n        counter: {\n            textAlign: \"center\",\n            fontFamily: \"'Overpass', sans-serif\",\n            color: \"#fff\",\n            fontSize: \"6em\",\n            lineHeight: \"1em\",\n            margin: \"0 auto\"\n        },\n        daysUntil: {\n            textAlign: \"center\",\n            fontFamily: \"'Overpass', sans-serif\",\n            color: \"#fff\",\n            fontSize: \"2.5em\",\n            margin: \"0 auto\"\n        },\n        event: {\n            textAlign: \"center\",\n            margin: \"0 auto\",\n            width: \"60vw\",\n            fontFamily: \"'Permanent Marker', cursive\",\n            fontSize: \"5em\",\n            color: \"#fff\",\n            lineHeight: \"1.1em\"\n        }\n    })\n);\n\ninterface ComponentProps {\n    data: {\n        date: string;\n        event: string;\n    };\n}\n\nexport const Countdown: React.FC<ComponentProps> = props => {\n    const classes = useStyles();\n\n    const [values, setValues] = React.useState({\n        daysUntil: 0,\n        event: \"A very very very special event\",\n        days: \"days\"\n    });\n\n    /*\n     * Calculates the number of days between two days -\n     * today's date and the countdown date.\n     */\n    const calculateDifference = () => {\n        const daysLeft = moment(props.data.date)\n            .add(1, \"days\")\n            .diff(moment(), \"days\");\n\n        setValues({\n            daysUntil: daysLeft < 0 ? 0 : daysLeft,\n            event:\n                props.data.event === \"\"\n                    ? \"A very very very special event\"\n                    : props.data.event,\n            days: daysLeft === 1 ? \"day\" : \"days\"\n        });\n    };\n\n    React.useEffect(() => {\n        calculateDifference();\n    }, [props.data]);\n\n    return (\n        <div className={classes.container}>\n            <div className={classes.counter}>{values.daysUntil}</div>\n            <div className={classes.daysUntil}>{`${values.days} until`}</div>\n            <div className={classes.event}>{values.event}</div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\nimport MomentUtils from \"@date-io/moment\";\nimport moment from \"moment\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        container: {\n            display: \"flex\",\n            flexWrap: \"wrap\"\n        },\n        datePicker: {\n            width: \"200px\"\n        },\n        textField: {\n            marginRight: theme.spacing(1),\n            width: 200,\n            marginLeft: 0\n        },\n        button: {\n            margin: theme.spacing(1)\n        },\n        input: {\n            display: \"none\"\n        }\n    })\n);\n\ninterface ComponentProps {\n    closeDrawer(side: string, open: boolean): void;\n    setValues(targetDate: string, targetEvent: string): void;\n}\n\nexport const Sidebar: React.FC<ComponentProps> = props => {\n    const [targetDate, setTargetDate] = React.useState(\n        moment().format(\"YYYY-MM-DD\")\n    );\n    const [targetEvent, setTargetEvent] = React.useState(\"\");\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <h1>New countdown</h1>\n            <MuiPickersUtilsProvider utils={MomentUtils}>\n                <DatePicker\n                    value={targetDate ? targetDate : moment()}\n                    onChange={date =>\n                        date\n                            ? setTargetDate(date.format(\"YYYY-MM-DD\"))\n                            : setTargetDate(moment().format(\"YYYY-MM-DD\"))\n                    }\n                    minDate={moment()}\n                    className={classes.datePicker}\n                />\n            </MuiPickersUtilsProvider>\n            <TextField\n                onChange={event => setTargetEvent(event.target.value)}\n                id=\"standard-basic\"\n                className={classes.textField}\n                label=\"Event name\"\n                margin=\"normal\"\n                inputProps={{ maxLength: 32 }}\n            />\n            <Button\n                variant=\"contained\"\n                className={classes.button}\n                onClick={() => {\n                    props.setValues(targetDate, targetEvent);\n                    props.closeDrawer(\"left\", false);\n                }}\n            >\n                Save\n            </Button>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Countdown } from \"./Components/Countdown\";\nimport { Sidebar } from \"./Components/Sidebar\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Background from \"../src/background.jpg\";\nimport Fab from \"@material-ui/core/Fab\";\nimport MomentUtils from \"@date-io/moment\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        list: {\n            width: 250\n        },\n        fullList: {\n            width: \"auto\"\n        },\n        fab: {\n            margin: \"1.5em\"\n        },\n        background: {\n            backgroundImage: `url(${Background})`,\n            backgroundSize: \"cover\",\n            height: \"100vh\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            fontSize: \"16px\",\n            [theme.breakpoints.down(\"xs\")]: {\n                fontSize: \"13px\"\n            }\n        },\n        topContainer: {\n            position: \"absolute\",\n            width: \"100%\",\n            left: 0\n        },\n        arrow: {\n            height: \"3em\",\n            width: \"5em\",\n            position: \"absolute\",\n            top: \"1.9em\",\n            left: \"5.3em\",\n            transform: \"rotate(135deg)\",\n            [theme.breakpoints.down(\"xs\")]: {\n                left: \"6.5em\"\n            }\n        },\n        addNew: {\n            fontFamily: \"'Nothing You Could Do', cursive\",\n            fontSize: \"1.5em\",\n            position: \"absolute\",\n            top: \"0.9em\",\n            left: \"7.1em\",\n            padding: \"0 1em 0 0\",\n            [theme.breakpoints.down(\"xs\")]: {\n                left: \"7.9em\"\n            }\n        }\n    })\n);\n\nexport const App: React.FC = () => {\n    const classes = useStyles();\n\n    const [state, setState] = React.useState({\n        //top: false,\n        left: false\n        //bottom: false,\n        //right: false\n    });\n\n    const [data, setData] = React.useState({\n        date: moment().format(\"YYYY-MM-DD\"),\n        event: \"A very very very special event\"\n    });\n\n    React.useEffect(() => {\n        checkLocalStorage();\n    }, []);\n\n    /*\n     * Function is called by Sidebar component and it sets values\n     * to local storage and component state.\n     */\n    const setValues = (targetDate: string, targetEvent: string) => {\n        localStorage.setItem(\n            \"countdown\",\n            JSON.stringify({\n                targetDate: targetDate,\n                eventName: targetEvent\n                    ? targetEvent\n                    : \"A very very very special event\"\n            })\n        );\n\n        setData({ date: targetDate, event: targetEvent });\n    };\n\n    /*\n     * On page refresh checks whether there are any values in\n     * local storage and sets component's state with them\n     * (or uses default values if local storage is empty).\n     */\n    const checkLocalStorage = () => {\n        if (localStorage.hasOwnProperty(\"countdown\")) {\n            const countdown = JSON.parse(localStorage.getItem(\n                \"countdown\"\n            ) as string);\n            setData({ date: countdown.targetDate, event: countdown.eventName });\n        }\n    };\n\n    const toggleDrawer = (side: string, open: boolean) => (\n        event: React.MouseEvent<HTMLElement>\n    ) => {\n        setState({ ...state, [side]: open });\n    };\n\n    const closeDrawer = (side: string, open: boolean) =>\n        setState({ ...state, [side]: open });\n\n    const sideList = (side: string) => (\n        <div className={classes.list} role=\"presentation\">\n            <List>\n                <ListItem>\n                    <Sidebar closeDrawer={closeDrawer} setValues={setValues} />\n                </ListItem>\n            </List>\n        </div>\n    );\n\n    return (\n        <div className={classes.background}>\n            <div className={classes.topContainer}>\n                <img src=\"arrow.png\" alt=\"Arrow\" className={classes.arrow} />\n                <div className={classes.addNew}>Add a new countdown</div>\n                <Fab\n                    color=\"primary\"\n                    aria-label=\"add\"\n                    className={classes.fab}\n                    onClick={toggleDrawer(\"left\", true)}\n                >\n                    <AddIcon />\n                </Fab>\n            </div>\n            <Drawer open={state.left} onClose={toggleDrawer(\"left\", false)}>\n                {sideList(\"left\")}\n            </Drawer>\n            <Countdown data={data} />\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}